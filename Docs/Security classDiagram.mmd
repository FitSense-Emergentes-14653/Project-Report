classDiagram
direction LR

%% ===== Value Objects =====
class AccountId { +value: UUID }
class RoleName { +value: string }
class TokenType { +value: string }
class HashedPassword { +value: string }

%% ===== Entities / Aggregates =====
class Account {
  +id: AccountId
  +email: string
  +password: HashedPassword
  +mfaEnabled: bool
  +status: string
  +enableMFA()
  +disableMFA()
  +changePassword(newHash: HashedPassword)
}

class Role {
  +id: UUID
  +name: RoleName
}

class Permission {
  +id: UUID
  +code: string
  +scope: string
}

class Token {
  +id: UUID
  +accountId: AccountId
  +type: TokenType
  +valueHash: string
  +expiresAt: Date
  +revoked: bool
}

class AuditLog {
  +id: UUID
  +accountId: AccountId
  +action: string
  +details: string
  +ip: string
  +occurredAt: Date
}

%% ===== Domain Services / Policy =====
class AuthPolicy {
  +accessTtl(): number
  +refreshTtl(): number
  +shouldRotate(now: Date, lastUsed: Date): bool
}

class AuthService {
  +issueTokens(account: Account): Token
  +validateCredentials(email: string, password: string): Account
  +refreshTokens(refreshToken: string): Token
}

class PasswordHasher {
  +hash(plain: string): HashedPassword
  +verify(plain: string, hashed: HashedPassword): bool
}

%% ===== Repository Interfaces (Ports) =====
class AccountRepository {
  +findByEmail(email: string): Account
  +save(account: Account): void
}

class RoleRepository {
  +findRolesByAccount(id: AccountId): Role
  +assignRole(accountId: AccountId, roleId: UUID): void
}

class TokenRepository {
  +store(token: Token): void
  +revoke(tokenId: UUID): void
  +findValidRefresh(accountId: AccountId): Token
}

class AuditLogRepository {
  +append(entry: AuditLog): void
}

%% ===== Associations =====
Account --> Role
Role --> Permission

Token --> AccountId
AuditLog --> AccountId
Account --> AccountId
Account --> HashedPassword

AuthService ..> AccountRepository
AuthService ..> RoleRepository
AuthService ..> TokenRepository
AuthService ..> PasswordHasher
AccountRepository <.. Account
Role *-- RoleName
Token *-- TokenType

